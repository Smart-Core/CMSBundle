<style media="all" type="text/css">
    ul.dynatree-container {
        border: 0px;
    }
    #treecontrol a {
        font-size: 80%;
    }
    #treecontrol {
        margin-bottom: 5px;
    }
</style>

<script type="text/javascript">
    $(function(){
        $("#btnCollapseAll").click(function(){
            $("#tree").dynatree("getRoot").visit(function(node){
                node.expand(false);
            });
            return false;
        });
        $("#btnExpandAll").click(function(){
            $("#tree").dynatree("getRoot").visit(function(node){
                node.expand(true);
            });
            return false;
        });
        $("#tree").dynatree({
            persist: true,
            minExpandLevel: 2,
            clickFolderMode: 1,
            fx: { height: "toggle", duration: 100 },
            cookie: {
                path: "/"
            },
            onClick: function(node) {
                // Use <a> href and target attributes to load the content:
                if( node.data.href ){
                    // Open target
                    //window.open(node.data.href, node.data.target);
                    window.location = node.data.href;
                    // or open target in iframe
                    //$("[name=contentFrame]").attr("src", node.data.href);
                }
            },
            onDblClick: function(node, event) {
                logMsg("onDblClick(%o, %o)", node, event);
                node.toggleExpand();
            },
            dnd: {
                onDragStart: function(node) {
                    // This function MUST be defined to enable dragging for the tree. Return false to cancel dragging of node.
                    logMsg("tree.onDragStart(%o)", node);
                    return true;
                },
                onDragStop: function(node) {
                    // This function is optional.
                    logMsg("tree.onDragStop(%o)", node);
                },
                autoExpandMS: 1000,
                preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
                onDragEnter: function(node, sourceNode) {
                    /** sourceNode may be null for non-dynatree droppables.
                     *  Return false to disallow dropping on node. In this case
                     *  onDragOver and onDragLeave are not called.
                     *  Return 'over', 'before, or 'after' to force a hitMode.
                     *  Return ['before', 'after'] to restrict available hitModes.
                     *  Any other return value will calc the hitMode from the cursor position.
                     */
                    logMsg("tree.onDragEnter(%o, %o)", node, sourceNode);
                    // return true;
                    // Don't allow dropping *over* a node (would create a child)
                    if( node.data.isFolder){
                        return "over";
                    } else {
                        return ["before", "after"];
                    }
                },
                onDragOver: function(node, sourceNode, hitMode) {
                    // Return false to disallow dropping this node.
                    logMsg("tree.onDragOver(%o, %o, %o)", node, sourceNode, hitMode);
                    // Prevent dropping a parent below it's own child
                    if(node.isDescendantOf(sourceNode)){
                        return false;
                    }
                    // Prohibit creating childs in non-folders (only sorting allowed)
                    if( !node.data.isFolder && hitMode === "over" ){
                        return "after";
                    }
                },
                onDrop: function(node, sourceNode, hitMode, ui, draggable) {
                    // This function MUST be defined to enable dropping of items on  the tree.
                    logMsg("tree.onDrop(%o, %o, %s)", node, sourceNode, hitMode);
                    sourceNode.move(node, hitMode);
                    // expand the drop target
                    sourceNode.expand(true);
                },
                onDragLeave: function(node, sourceNode) {
                    // Always called if onDragEnter was called.
                    logMsg("tree.onDragLeave(%o, %o)", node, sourceNode);
                }
            }
        });

        {% if folder_id %}
            $("#tree").dynatree("getTree").activateKey("folder_id_{{ folder_id }}");
            {#$("#tree").dynatree("getTree").getNodeByKey("id4.3.2").activate();#}
        {% elseif node_id %}
            $("#tree").dynatree("getTree").activateKey("node_id_{{ node_id }}");
        {% endif %}

        $("#tree").dynatree("getRoot").visit(function(node){
            node.expand(true);
        });
    });
</script>

<div id="treecontrol">
    <a href="#" id="btnCollapseAll">Свернуть все</a> |
    <a href="#" id="btnExpandAll">Развернуть все</a>
</div>

{% set admin_folder = path('cms_admin_structure') ~ 'folder/' %}
{% set admin_node = path('cms_admin_structure') ~ 'node/' %}

<div id="tree">
    {{ knp_menu_render('CMSBundle:AdminMenu:structureTree', {'currentClass': 'active'}) }}
</div>
